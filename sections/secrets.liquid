{% style %}
  #secrets-{{ section.id }} {
    background-image: url("{{ section.settings.background_image | image_url }}");
    background-size: cover;
    background-position: left;
    background-repeat: no-repeat;
  }
  .secrets-container {
    padding: 3rem 0;
  }
  .secrets-item-container {
    margin-top: 2.5rem;
  }

  .secrets-container::after {
    content: "";
    position: absolute;
    right: 0;
    top: 0;
    bottom: 0;
    width: 40px;
    pointer-events: none;
  }

  .secrets-item-card {
    display: grid;
    align-content: center;
    background-color: var(--color-five);
    /* padding: 1.25rem 2.5rem; */
    margin: 1rem;
    border-radius: 20px;
    width: 30vw;
    /* height: calc(30vw * 1.184); */
    aspect-ratio: 136/162;
    min-width: 136px;
    min-height: 162px;
    max-width: 273px;
    max-height: 324px;
  }

  .secrets-item-card > h2 {
    margin-bottom: 0;
  }

  .secrets-item-card > p {
    font-weight: 500;
    margin: 0;
  }

  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }

  .secrets-item-popout {
    background: white;
    padding: 3.5rem 2rem 2rem;
    border-radius: 15px;
    max-width: 90%;
    width: 500px;
    position: relative;
    opacity: 0;
    transform: scale(0.8);
    transition: all 0.3s ease-in-out;
  }

  .secrets-item-popout.active {
    opacity: 1;
    transform: scale(1);
  }

  .modal-close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    padding: 0.5rem;
  }

  .modal-overlay.active {
    display: flex;
  }

  .secrets-item-card {
    cursor: pointer;
    transition: transform 0.2s ease;
  }

  .secrets-item-card:hover {
    transform: translateY(-5px);
  }

  .secrets-item-card:first-child {
    margin-left: 0;
  }

  @media screen and (min-width: 768px) {
    #secrets-{{ section.id }} {
      background-position: right;
    }
    .secrets-container {
      padding: 5rem 0 4rem;
    }
    .secrets-main-text > p {
      width: 70%;
      max-width: 1350px;
    }
    .secrets-item-container {
      width: 100%;
      height: calc(100% * (324 / 273));
      margin-left: 0;
      justify-content: space-between;
    }
    .secrets-item-card {
      width: 14.2vw;
      height: calc(14.2vw * 1.184);
    }
  }
{% endstyle %}
<div id="secrets-{{ section.id }}" class="page-width">
  <div class="secrets-container">
    <div class="secrets-main-text">
      <h2>{{ section.settings.header }}</h2>
      <p>{{ section.settings.main_paragraph }}</p>
    </div>
    <div class="secrets-item-container daybreak-mobile-side-scroll">
      {% for block in section.blocks %}
        <div class="secrets-item-card" data-secret-index="{{ forloop.index }}">
          <h2 class="text-center">{{ forloop.index }}</h2>
          <p class="text-center font-avenir-next">Secret</p>
        </div>
        <div class="secrets-item-popout hidden" id="secret-popout-{{ forloop.index }}" aria-hidden="true">
          <h3 class="secrets-item-heading">{{ block.settings.heading }}</h3>
          <p class="secrets-item-paragraph">{{ block.settings.block_paragraph }}</p>
        </div>
      {% endfor %}
    </div>
  </div>
</div>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Create modal overlay
    const modalOverlay = document.createElement('div');
    modalOverlay.className = 'modal-overlay';
    document.body.appendChild(modalOverlay);

    // Add click handlers to all secret cards
    const secretCards = document.querySelectorAll('.secrets-item-card');
    secretCards.forEach((card) => {
      card.addEventListener('click', function () {
        const secretIndex = this.getAttribute('data-secret-index');
        const popout = document.getElementById(`secret-popout-${secretIndex}`);

        if (popout) {
          // Clone the popout content
          const popoutContent = popout.cloneNode(true);

          // Add close button
          const closeButton = document.createElement('button');
          closeButton.className = 'modal-close';
          closeButton.innerHTML = 'Ã—';
          closeButton.setAttribute('aria-label', 'Close modal');
          popoutContent.appendChild(closeButton);

          // Clear previous modal content
          modalOverlay.innerHTML = '';

          // Add new content
          modalOverlay.appendChild(popoutContent);

          // Show modal with animation
          modalOverlay.classList.add('active');
          setTimeout(() => {
            popoutContent.classList.remove('hidden');
            popoutContent.classList.add('active');
          }, 10);

          // Add close handlers
          const closeModal = () => {
            popoutContent.classList.remove('active');
            modalOverlay.classList.remove('active');
          };

          closeButton.addEventListener('click', closeModal);
          modalOverlay.addEventListener('click', (e) => {
            if (e.target === modalOverlay) {
              closeModal();
            }
          });

          // Add keyboard navigation
          document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
              closeModal();
            }
          });
        }
      });
    });
  });
</script>
{% schema %}
{
  "name": "secrets",
  "tag": "section",
  "class": "section",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "text",
      "id": "header",
      "label": "Header"
    },
    {
      "type": "inline_richtext",
      "id": "main_paragraph",
      "default": "heading",
      "label": "Main Paragraph"
    },
    {
      "type": "image_picker",
      "id": "background_image",
      "label": "Background Image"
    }
  ],
  "blocks": [
    {
      "name": "Secret Block",
      "type": "secret-block",
      "settings": [
        {
          "type": "text",
          "id": "heading",
          "label": "t:sections.secrets.blocks.secret-block.settings.heading.label",
          "default": "t:sections.secrets.blocks.secret-block.settings.heading.default"
        },
        {
          "type": "text",
          "id": "block_paragraph",
          "label": "Paragraph"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "secrets",
      "blocks": [
        {
          "type": "secret-block"
        },
        {
          "type": "secret-block"
        },
        {
          "type": "secret-block"
        },
        {
          "type": "secret-block"
        },
        {
          "type": "secret-block"
        }
      ]
    }
  ]
}
{% endschema %}
