<style>
  .video-container {
    position: fixed;
    bottom: 20px;
    right: 20px;
    min-width: 124px;
    width: 15%;
    max-width: 320px;
    transition: all 0.3s ease;
    z-index: 1000;
    visibility: hidden;
    opacity: 0;
  }

  .video-container.visible {
    visibility: visible;
    opacity: 1;
  }

  .video-container.expanded {
    width: 35%;
  }

  .video-wrapper {
    position: relative;
    width: 100%;
    background: #000;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    z-index: 1;
  }

  .control-btn {
    -webkit-appearance: none;
    touch-action: manipulation;
    position: absolute;
    width: 24px;
    height: 24px;
    background: rgba(0, 0, 0, 0.6);
    border: none;
    border-radius: 50%;
    color: white;
    cursor: pointer;
    font-size: 16px;
    line-height: 1;
    padding: 0;
    z-index: 2;
  }

  .close-btn {
    top: 8px;
    right: 8px;
  }

  .mute-btn {
    bottom: 8px;
    left: 8px;
    padding: 0 0.5rem 0 0.375rem;
  }

  .mute-btn svg {
    width: 12px;
    height: 12px;
    fill: #ffffff;
  }

  video {
    width: 100%;
    display: block;
  }
  #video-text {
    font-size: 1.25rem;
    color: white;
    text-align: center;
    position: absolute;
    width: 100%;
    height: 100%;
    display: grid;
    place-items: center;
    margin: 0;
    top: 0;
    left: 0;
    pointer-events: none;
  }
  @media (min-width: 1080px) {
    #video-text {
      font-size: 1.75rem;
    }
  }
</style>
<div class="video-container">
  <div class="video-wrapper">
    <button class="control-btn close-btn">Ã—</button>
    <button class="control-btn mute-btn">
      <svg class="volume-off" width="49" height="50" viewBox="0 0 49 50">
        <g fill="#FFF" stroke="#FFF" transform="translate(1 .715)">
          <polygon points="0 14.685 10 14.685 30 .285 30 48.285 10 33.885 0 33.885"/>
          <line x1="1" x2="46.377" y1="1.285" y2="47.825" fill="#fff" stroke-width="2" transform="rotate(-.725 23.688 24.555)"/>
          <line x1="1" x2="46.377" y1=".285" y2="46.825" fill="#fff" stroke-width="2" transform="scale(-1 1) rotate(-.725 0 3766.582)"/>
        </g>
      </svg>
      <svg class="volume-on" width="49" height="50" viewBox="0 0 49 50">
        <g fill="none" fill-rule="evenodd" transform="translate(0 1)"><polygon fill="#FFF" fill-rule="nonzero" points="0 14.4 10 14.4 30 0 30 48 10 33.6 0 33.6"/><path stroke="#FFF" stroke-width="3" d="M34,9 C39.3589838,18.2820323 39.3589838,29.7179677 34,39"/><path stroke="#FFF" stroke-width="3" d="M39,0 C49.1112347,14.5277862 49.1112347,33.4722138 39,48"/></g>
      </svg>
    </button>
    <h5 id="video-text">Meet the Founder</h5>
    <video
      id="floatingVideo"
      playsinline
      webkit-playsinline
      muted
      controlslist="nodownload nofullscreen"
    >
      <source src="{{ 'meet_the_founder_180_320.mp4' | file_url }}" type="video/mp4" media="(max-width: 320px)">
      <source src="{{ 'meet_the_founder_360_640.mp4' | file_url }}" type="video/mp4" media="(min-width: 321px)">
    </video>
  </div>
</div>

<script>
  const container = document.querySelector('.video-container');
  const video = document.querySelector('#floatingVideo');
  const closeBtn = document.querySelector('.close-btn');
  const muteBtn = document.querySelector('.mute-btn');
  const volumeOn = document.querySelector('.volume-on');
  const volumeOff = document.querySelector('.volume-off');
  const videoText = document.querySelector('#video-text');

  let isExpanded = false;
  let hasBeenExpanded = false;

  function showVideo() {
    if (container.classList.contains('visible')) return;
    container.classList.add('visible');
    video.play().catch((e) => console.error('Play failed:', e));
  }

  function toggleExpand() {
    isExpanded = !isExpanded;
    container.classList.toggle('expanded');

    if (isExpanded && !hasBeenExpanded) {
      video.currentTime = 0;
      hasBeenExpanded = true;
    }

    if (isExpanded) {
      video.muted = false;
      volumeOff.style.display = 'none';
      volumeOn.style.display = 'block';
      videoText.style.display = 'none';
    }
  }

  function toggleMute() {
    video.muted = !video.muted;

    if (video.muted) {
      volumeOff.style.display = 'block';
      volumeOn.style.display = 'none';
    } else {
      volumeOff.style.display = 'none';
      volumeOn.style.display = 'block';
    }
  }

  function closeVideo() {
    container.classList.remove('visible');
    video.pause();
    isExpanded = false;
    container.classList.remove('expanded');
  }

  // Initial volume icon state
  volumeOn.style.display = 'none';
  volumeOff.style.display = 'block';

  // Event Listeners
  video.addEventListener('loadedmetadata', showVideo);
  video.addEventListener('canplay', showVideo);
  video.addEventListener('click', toggleExpand);
  closeBtn.addEventListener('click', closeVideo);
  muteBtn.addEventListener('click', toggleMute);

  // Handle iOS/Safari specific touch events
  video.addEventListener('touchstart', (e) => {
    if (!isExpanded) {
      e.preventDefault();
      toggleExpand();
    }
  });
</script>
